from rest_framework.views import exception_handler


def core_exception_handler(exc, context):
    # If an exception occurs that we do not handle explicitly here, we want to pass it to DRF's default exception
    # handler. Yet, if we are handling such type of exception, we need access to the DRF-generated response - let's
    # get it beforehand here.
    response = exception_handler(exc, context)
    handlers = {"ValidationError": _handle_generic_error}
    # Determine the type of the current exception. We'll use this shortly to decide whether to handle it ourselves or
    # pass it to DRF.
    exception_class = exc.__class__.__name__

    if exception_class in handlers:
        # If this is a handleable exception - handle it :) Otherwise, return the response generated by DRF earlier
        return handlers[exception_class](exc, context, response)

    return response


def _handle_generic_error(exc, context, response):
    response.data = {"errors": response.data}

    return response
